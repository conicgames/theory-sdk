import { ConstantCost, ExponentialCost, FirstFreeCost, FreeCost, LinearCost } from "./api/Costs";
import { Localization } from "./api/Localization";
import { BigNumber } from "./api/BigNumber";
import { theory } from "./api/Theory";
import { Utils } from "./api/Utils";

var id = "stellar-evolution";
var name = "Stellar Evolution";
var description = "Citations\nAmard et al. (2019), A&A 631 A77\nYusof et al. (2022), MNRAS 511 2814"";
var authors = "pacowoc";
var version = 0;

var energy;
const data =
    //Everything is in Solar Unit
    {
        "0.2": {"year": [0.0, 65348.476828, 144106.65345, 248790.40887, 390001.8849, 581113.02365, 840493.52594, 3995830.9356, 4500252.1921, 5146338.7491, 6014589.8548, 7197257.603, 8808315.8236, 11020395.745, 14052688.095, 18203801.517, 23832129.023, 31527073.625, 42032591.319, 56551174.484, 123108266.99, 189662760.29, 256216667.92, 322770350.47, 389323922.92, 455877433.34, 522430905.35, 588984351.95, 655537780.86, 722091196.95, 788644603.46, 855198002.64, 921751396.07, 988304784.89, 1054858170.0, 1121411552.0, 1187964931.5, 1254518308.9, 1321071684.4, 1387625058.4, 1454178430.9, 1520731802.4, 1587285172.9, 1653838542.4, 1720391911.2, 1786945279.2, 1853498646.5, 1920052013.4, 1986605379.7, 2053158745.6, 2119712111.1, 2186265476.1, 2252818840.8, 2319372205.3, 2385925569.4, 2452478933.3, 2519032297.0, 2585585660.3, 2652139023.5, 2718692386.5, 2785245749.4, 2851799112.0, 2918352474.5, 2984905836.8, 3051459199.1, 3118012561.2, 3184565923.2, 3251119285.0, 3317672646.8, 3384226008.4, 3450779370.0, 3517332731.5, 3583886092.9, 3650439454.3, 3716992815.4, 3783546176.6, 3850099537.7, 3916652898.8, 3983206259.8, 4049759620.8, 4116312981.6, 4182866342.4, 4249419703.2, 4315973063.9, 4382526424.6, 4449079785.3, 4515633145.8, 4582186506.4, 4648739866.9, 4715293227.4, 4781846587.9, 4848399948.4, 4914953308.7, 4981506669.0, 5048060029.4, 5114613389.7, 5181166750.0, 5247720110.3, 5314273470.4, 5380826830.6, 5457452653.7, 5573929971.5, 5685610080.8, 5804716946.7, 5923122376.7, 6042915994.6, 6162008703.1, 6279946683.5, 6398785640.6, 6519262348.5, 6638339419.1, 6757095492.0, 6875547014.7, 6995550697.1, 7114614998.9, 7233133853.7, 7358943919.7, 7471791456.4, 7590845196.9, 7719919814.5, 7836875947.8, 7956750635.1, 8076090794.9, 8203910618.6, 8315190147.7, 8443228215.3, 8563452723.2, 8691026539.6, 8801523220.5, 8930563409.8, 9050787463.1, 9177434413.4, 9298792130.5, 9417875042.2, 9546899110.6, 9664956093.6, 9786488812.9, 9915162328.6, 10035386480.0, 10161524831.0, 10284738367.0, 10411490990.0, 10540495815.0, 10658104303.0, 10779733973.0, 10909946681.0, 11028482883.0, 11161772248.0, 11288685125.0, 11418372575.0, 11537380437.0, 11662803735.0, 11790454426.0, 11917319790.0, 12045783969.0, 12171498434.0, 12295399571.0, 12425238458.0, 12555397369.0, 12684372636.0, 12807450229.0, 12944821439.0, 13062310046.0, 13201807116.0, 13324351428.0, 13452235193.0, 13582433769.0, 13712631960.0, 13851562917.0, 13980385602.0, 14107603665.0, 14244946997.0, 14371109022.0, 14502541386.0, 14627673180.0, 14765692115.0, 14893782837.0, 15032039236.0, 15162231950.0, 15292424415.0, 15431568185.0, 15561742610.0, 15698913893.0, 15833579250.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0, 15961162341.0], "logtempeff": [3.515194, 3.514, 3.513243, 3.51264, 3.512268, 3.51204, 3.511892, 3.511765, 3.511688, 3.511416, 3.511034, 3.510577, 3.510138, 3.509638, 3.509091, 3.508404, 3.507474, 3.506314, 3.504855, 3.50313, 3.498363, 3.495625, 3.494003, 3.493213, 3.492933, 3.492809, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492685, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492685, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492809, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492824, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492948, 3.492964, 3.492964, 3.492964, 3.492964, 3.492964, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493089, 3.493213, 3.493213, 3.493213, 3.493225, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493228, 3.493279, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493367, 3.493412, 3.493492, 3.493492, 3.493492, 3.493492, 3.493492, 3.493492, 3.493492, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507, 3.493507], "logtempcen": [5.845016, 5.884251, 5.924007, 5.964511, 6.005749, 6.047694, 6.090636, 6.134197, 6.178318, 6.222439, 6.266425, 6.310424, 6.353965, 6.397345, 6.440356, 6.482934, 6.524499, 6.565501, 6.605473, 6.644434, 6.728301, 6.767741, 6.788366, 6.796905, 6.800507, 6.801997, 6.802638, 6.802898, 6.803027, 6.803068, 6.803095, 6.803095, 6.803095, 6.803095, 6.803156, 6.803156, 6.803156, 6.803163, 6.803163, 6.803163, 6.803163, 6.803163, 6.803163, 6.803163, 6.803163, 6.803163, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.803232, 6.80323, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803225, 6.803163, 6.803163, 6.803163, 6.803163, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803156, 6.803149, 6.803088, 6.803088, 6.803088, 6.803088, 6.803081, 6.803019, 6.803019, 6.803019, 6.803012, 6.802951, 6.802951, 6.802951, 6.802944, 6.802883, 6.802883, 6.802883, 6.802814, 6.802814, 6.802814, 6.802746, 6.802746, 6.802716, 6.802677, 6.802677, 6.802617, 6.802617, 6.802609, 6.802549, 6.802549, 6.80248, 6.80248, 6.802472, 6.802412, 6.802412, 6.802343, 6.802343, 6.80228, 6.802275, 6.802275, 6.802206, 6.802206, 6.802139, 6.802138, 6.802076, 6.802069, 6.802008, 6.802001, 6.801939, 6.801934, 6.801871, 6.801871, 6.801802, 6.801802, 6.801739, 6.801733, 6.801673, 6.801665, 6.801604, 6.801596, 6.801536, 6.80151, 6.801467, 6.801459, 6.801398, 6.80133, 6.80133, 6.801261, 6.801261, 6.801193, 6.801193, 6.801124, 6.801062, 6.801055, 6.800993, 6.800986, 6.800925, 6.800911, 6.800856, 6.800787, 6.800787, 6.800719, 6.800719, 6.80065, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588, 6.800588], "loglum": [-0.243577, -0.335623, -0.427669, -0.519715, -0.611761, -0.703808, -0.795854, -0.8879, -0.979946, -1.071992, -1.164039, -1.256085, -1.348132, -1.440178, -1.532224, -1.62427, -1.716316, -1.808363, -1.900409, -1.992455, -2.198605, -2.299766, -2.354502, -2.377665, -2.387331, -2.39131, -2.393202, -2.393798, -2.394096, -2.394204, -2.394204, -2.394204, -2.394193, -2.394192, -2.394096, -2.394096, -2.394096, -2.394096, -2.39409, -2.394084, -2.393989, -2.393989, -2.393989, -2.393977, -2.393882, -2.393882, -2.393882, -2.393882, -2.393774, -2.393774, -2.393774, -2.393774, -2.393666, -2.393666, -2.393666, -2.393561, -2.393559, -2.393559, -2.393559, -2.393546, -2.393452, -2.393452, -2.39344, -2.393344, -2.393344, -2.393312, -2.393236, -2.393236, -2.393129, -2.393129, -2.393129, -2.393022, -2.393022, -2.392914, -2.392902, -2.39289, -2.392795, -2.392795, -2.392687, -2.392687, -2.392675, -2.39258, -2.39257, -2.392473, -2.392473, -2.392366, -2.392366, -2.392258, -2.392258, -2.392151, -2.392151, -2.392012, -2.391854, -2.391748, -2.391748, -2.391645, -2.39164, -2.391638, -2.391533, -2.391524, -2.391426, -2.391319, -2.391213, -2.391116, -2.39101, -2.390903, -2.390797, -2.39069, -2.390583, -2.390476, -2.390381, -2.390264, -2.390087, -2.389967, -2.389861, -2.389754, -2.389647, -2.389541, -2.38934, -2.389233, -2.389128, -2.389021, -2.388902, -2.388704, -2.388596, -2.388489, -2.388383, -2.388189, -2.388076, -2.38797, -2.38777, -2.387664, -2.387552, -2.387357, -2.387252, -2.38706, -2.386934, -2.386799, -2.38644, -2.386336, -2.386136, -2.38603, -2.385918, -2.385738, -2.385607, -2.385408, -2.385303, -2.385133, -2.38499, -2.384788, -2.38467, -2.384462, -2.384355, -2.384156, -2.384051, -2.383845, -2.383705, -2.383537, -2.383339, -2.383234, -2.383024, -2.382917, -2.382629, -2.382428, -2.382293, -2.382117, -2.381919, -2.381802, -2.381605, -2.381408, -2.381303, -2.381106, -2.380897, -2.380793, -2.380596, -2.380392, -2.380274, -2.380086, -2.379889, -2.379774, -2.379577, -2.37939, -2.379216, -2.379045, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757, -2.378757], "mass": [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999997, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999995, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.19999993, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.1999999, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999987, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985, 0.19999985], "radius": [2.40034, 2.16656, 1.95324, 1.75856, 1.5818, 1.42202, 1.27793, 1.14806, 1.03168, 0.92785, 0.83519, 0.7518, 0.67716, 0.60997, 0.54963, 0.49555, 0.44747, 0.40439, 0.36607, 0.33194, 0.26764, 0.24119, 0.22818, 0.22295, 0.22078, 0.21988, 0.21952, 0.21938, 0.21931, 0.21929, 0.21928, 0.21927, 0.21928, 0.21928, 0.21928, 0.21928, 0.21929, 0.21929, 0.21929, 0.2193, 0.2193, 0.2193, 0.21931, 0.21931, 0.21932, 0.21932, 0.21932, 0.21933, 0.21933, 0.21934, 0.21934, 0.21935, 0.21935, 0.21936, 0.21937, 0.21937, 0.21938, 0.21938, 0.21939, 0.2194, 0.2194, 0.21941, 0.21942, 0.21942, 0.21943, 0.21944, 0.21944, 0.21945, 0.21946, 0.21947, 0.21947, 0.21948, 0.21949, 0.2195, 0.21951, 0.21951, 0.21952, 0.21953, 0.21954, 0.21955, 0.21956, 0.21957, 0.21958, 0.21959, 0.2196, 0.21961, 0.21962, 0.21963, 0.21964, 0.21965, 0.21966, 0.21967, 0.21968, 0.21969, 0.2197, 0.21971, 0.21972, 0.21973, 0.21974, 0.21975, 0.21977, 0.21979, 0.21981, 0.21983, 0.21985, 0.21987, 0.21989, 0.21992, 0.21994, 0.21996, 0.21999, 0.22001, 0.22003, 0.22006, 0.22008, 0.2201, 0.22013, 0.22016, 0.22018, 0.22021, 0.22024, 0.22027, 0.22029, 0.22033, 0.22035, 0.22038, 0.22041, 0.22044, 0.22047, 0.2205, 0.22053, 0.22056, 0.22059, 0.22062, 0.22064, 0.22067, 0.2207, 0.22074, 0.22076, 0.22079, 0.22082, 0.22085, 0.22089, 0.22092, 0.22095, 0.22099, 0.22102, 0.22106, 0.22109, 0.22112, 0.22116, 0.22119, 0.22122, 0.22125, 0.22129, 0.22132, 0.22135, 0.22139, 0.22143, 0.22146, 0.22149, 0.22153, 0.22156, 0.2216, 0.22163, 0.22167, 0.22171, 0.22174, 0.22178, 0.22182, 0.22185, 0.22189, 0.22193, 0.22196, 0.222, 0.22204, 0.22206, 0.2221, 0.22214, 0.22218, 0.22222, 0.22225, 0.22229, 0.22233, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236, 0.22236]}
        "0.3": 
    }

var init = () => {
    energy = theory.createCurrency();

    let baseId = 0

    ///////////////////
    // Regular Upgrades

    // c1
    {
        let getDesc = (level) => "c_1=" + getC1(level).toString(0);
        c1 = theory.createUpgrade(0, currency, new FirstFreeCost(new ExponentialCost(15, Math.log2(2))));
        c1.getDescription = (_) => Utils.getMath(getDesc(c1.level));
        c1.getInfo = (amount) => Utils.getMathTo(getDesc(c1.level), getDesc(c1.level + amount));
    }
    // c2
    {
        let getDesc = (level) => "c_2=2^{" + level + "}"
        let getInfo = (level) => "c_2=" + getC2(level).toString(0);
        c2 = theory.createUpgrade(1, currency, new ExponentialCost(5, Math.log2(10)));
        c2.getDescription = (_) => Utils.getMath(getDesc(c2.level));
        c2.getInfo = (amount) => Utils.getMathTo(getInfo(c2.level), getInfo(c2.level + amount));
    }
    // q1
    {
        let getDesc = (level) => "q_1=" + getQ1(level).toString(0);
        q1 = theory.createUpgrade(2, currency, new ExponentialCost(5, Math.log2(3)));
        q1.getDescription = (_) => Utils.getMath(getDesc(q1.level));
        q1.getInfo = (amount) => Utils.getMathTo(getDesc(q1.level), getDesc(q1.level + amount));
    }
    // q2
    {
        let getDesc = (level) => "q_2=2^{" + level + "}"
        let getInfo = (level) => "q_2=" + getQ2(level).toString(0);
        q2 = theory.createUpgrade(3, currency, new ExponentialCost(5, Math.log2(10)));
        q2.getDescription = (_) => Utils.getMath(getDesc(q2.level));
        q2.getInfo = (amount) => Utils.getMathTo(getInfo(q2.level), getInfo(q2.level + amount));
    }
    // page number
    {
        let getDesc = (level) => "\\text{Page }" + getPage(level).toString(0);
        page = theory.createUpgrade(4, currency, new ConstantCost(0));
        page.getDescription = (_) => Utils.getMath(getDesc(page.level));
        page.getInfo = (amount) => Utils.getMathTo(getDesc(page.level), getDesc(page.level + amount));
    }

    baseId += 100;
    // Cost for c22
    let c22Cost = new CustomCost((level) =>
        {
            var cost = 1;
            cost = BigNumber.from(cost) * BigNumber.from(3.74447096981) ** level;
            return BigNumber.from(cost);
        });
    // Cost for c23
    let c23Cost = new CustomCost((level) =>
        {
            var cost = 1;
            cost = BigNumber.from(cost) * BigNumber.from(1e30) ** level;
            return BigNumber.from(cost);
        });

    // c1
    {
        let getDesc = (level) => "c_1=" + getC21(level).toString(0);
        c21 = theory.createUpgrade(baseId, currency2, new FirstFreeCost(new ExponentialCost(10, Math.log2(2))));
        c21.getDescription = (_) => Utils.getMath(getDesc(c21.level));
        c21.getInfo = (amount) => Utils.getMathTo(getDesc(c21.level), getDesc(c21.level + amount));
    }
    // c2
    {
        let getDesc = (level) => "c_2=2^{" + level + "}";
        let getInfo = (level) => "c_2=" + getC22(level).toString(0);
        c22 = theory.createUpgrade(baseId+1, currency2, c22Cost);
        c22.getDescription = (_) => Utils.getMath(getDesc(c22.level));
        c22.getInfo = (amount) => Utils.getMathTo(getInfo(c22.level), getInfo(c22.level + amount));
    }
    // c3
    {
        let getDesc = (level) => "c_3=" + getC23(level).toString(0);
        c23 = theory.createUpgrade(baseId+2, currency2, c23Cost)
        c23.getDescription = (_) => Utils.getMath(getDesc(c23.level));
        c23.getInfo = (amount) => Utils.getMathTo(getDesc(c23.level), getDesc(c23.level + amount));
    }
    // n
    {
        let getDesc = (level) => "n=" + getN(level).toString(0);
        n = theory.createUpgrade(baseId+3, currency2, new ExponentialCost(10, Math.log2(2)));
        n.getDescription = (_) => Utils.getMath(getDesc(n.level));
        n.getInfo = (amount) => Utils.getMathTo(getDesc(n.level), getDesc(n.level + amount));
    }

    /////////////////////
    // Permanent Upgrades
    theory.createBuyAllUpgrade(1, currency, 1e13);
    theory.createAutoBuyerUpgrade(2, currency, 1e30);

    ///////////////////////
    //// Milestone Upgrades
    theory.setMilestoneCost(new LinearCost(25, 25));

    {
        c1Exp = theory.createMilestoneUpgrade(0, 3);
        c1Exp.description = Localization.getUpgradeIncCustomExpDesc("c_1", "0.05");
        c1Exp.info = Localization.getUpgradeIncCustomExpInfo("c_1", "0.05");
        c1Exp.boughtOrRefunded = (_) => theory.invalidatePrimaryEquation();
    }

    {
        c2Exp = theory.createMilestoneUpgrade(1, 3);
        c2Exp.description = Localization.getUpgradeIncCustomExpDesc("c_2", "0.05");
        c2Exp.info = Localization.getUpgradeIncCustomExpInfo("c_2", "0.05");
        c2Exp.boughtOrRefunded = (_) => theory.invalidatePrimaryEquation();
    }

    {
        q1Exp = theory.createMilestoneUpgrade(2, 3);
        q1Exp.description = Localization.getUpgradeIncCustomExpDesc("q_1", "0.1");
        q1Exp.info = Localization.getUpgradeIncCustomExpInfo("q_1", "0.1");
        q1Exp.boughtOrRefunded = (_) => theory.invalidatePrimaryEquation();
    }

    {
        q2Exp = theory.createMilestoneUpgrade(3, 3);
        q2Exp.description = Localization.getUpgradeIncCustomExpDesc("q_2", "0.1");
        q2Exp.info = Localization.getUpgradeIncCustomExpInfo("q_2", "0.1");
        q2Exp.boughtOrRefunded = (_) => theory.invalidatePrimaryEquation();
    }
    
    /////////////////
    //// Achievements
    aMoney = theory.createAchievementCategory(0, "Money");
    aPub = theory.createAchievementCategory(1, "Publications")
    aSecret = theory.createAchievementCategory(2, "Secrets")

    achievement1 = theory.createAchievement(0, aMoney, "Thousands", "You reached 1000p, nice", () => currency.value > 1000);
    achievement2 = theory.createAchievement(1, aMoney, "Millions", "You reached 1e6p, what", () => currency.value > 1000000);
    achievement3 = theory.createAchievement(2, aMoney, "Billions", "You reached 1e4 p" + ", nice", () => currency.value > 1e9);
    achievement3 = theory.createAchievement(3, aPub, "Starting Your Career", "You just unlocked publicztions, now get that one publications boy", () => theory.isPublicationAvailable)
    achievement4 = theory.createSecretAchievement(4, aSecret, "WHAT", "Haha funny number 69", "Do the funny number", () => c1.level == 69);

    ///////////////////
    //// Story chapters
    chapter1 = theory.createStoryChapter(0, "The Start", "You started in this theory\nI don't know why\nBut you just started this theory\nThis is the only chapter\nGood luck", () => c1.level > 0);

    page.maxLevel = 1;
    n.maxLevel = 40;
    c23.maxLevel = 30;

    updateAvailability();
}

var updateAvailability = () => {
    c2Exp.isAvailable = c1Exp.level > 0;
    q2Exp.isAvailable = q1Exp.level > 0;

    c1.isAvailable = page.level == 0;
    c2.isAvailable = page.level == 0;
    q1.isAvailable = page.level == 0;
    q2.isAvailable = page.level == 0;

    c21.isAvailable = page.level == 1;
    c22.isAvailable = page.level == 1;
    c23.isAvailable = page.level == 1;
    n.isAvailable = page.level == 1;
}

var tick = (elapsedTime, multiplier) => {
    let dt = BigNumber.from(elapsedTime * multiplier);
    let bonus = theory.publicationMultiplier;
    if (getC1(c1.level) < 1) {
        q = getQ1(q1.level).pow(getQ1Exponent(q1Exp.level));
        currency.value += dt * bonus * getC1(c1.level).pow(getC1Exponent(c1Exp.level).square()) * q;
    }
    else if (page.level == 0) {
    q += (getQ1(q1.level).pow(getQ1Exponent(q1Exp.level)) * getQ2(q2.level).pow(getQ2Exponent(q2Exp.level))) / BigNumber.TWO
    beta = getC1(c1.level).pow(getC1Exponent(c1Exp.level)) / getQ2(q2.level).pow(getQ2Exponent(q2Exp.level))
    currency.value += dt * bonus * getC1(c1.level).pow(BigNumber.TWO ** getC1Exponent(c1Exp.level)) * q /
                                   getC2(c2.level).pow(getC2Exponent(c2Exp.level)) + getC2(c2.level).pow(getC2Exponent(c2Exp.level)) * (q / BigNumber.TWO) + currency2.value * (getC2(c2.level).pow(getC2Exponent(c2Exp.level)) / getC1(c1.level).pow(getC1Exponent(c1Exp.level))) * q.pow(1.5);
    }
    else if (page.level == 1) {
    for(let i = 0; i < getN(n.level); i++) {
    currency2.value += dt * bonus * (((((BigNumber.TWO * getC21(c21.level))) * ((getC22(c22.level) / BigNumber.TWO))))/BigNumber.HUNDRED).pow(BigNumber.ONE + getC23(c23.level)/BigNumber.THOUSAND); 
    }
    }
    theory.invalidatePrimaryEquation();
    theory.invalidateTertiaryEquation();
    updateAvailability();
}

var getPrimaryEquation = () => {
    let result = "";

    if (page.level == 0) {
    result = "\\dot{\\rho_1} = \\frac{c_1";

    if (c1Exp.level == 1) result += "^{1.05";
    if (c1Exp.level == 2) result += "^{1.1";
    if (c1Exp.level == 3) result += "^{1.15";

    result += "^{2}";

    if (c1Exp.level >= 1) result += "}";

    result += "q";

    result += "}{c_2}";

    if (c2Exp.level == 1) result += "^{1.05}";
    if (c2Exp.level == 2) result += "^{1.1}";
    if (c2Exp.level == 3) result += "^{1.15}";

    result += "+\\beta c_2";

    if (c2Exp.level == 1) result += "^{1.05}";
    if (c2Exp.level == 2) result += "^{1.1}";
    if (c2Exp.level == 3) result += "^{1.15}";

    result += "\\frac{q}{2}+\\frac{\\rho_2}{1000}\\frac{c_2";
    
    if (c2Exp.level == 1) result += "^{1.05}";
    if (c2Exp.level == 2) result += "^{1.1}";
    if (c2Exp.level == 3) result += "^{1.15}";

    result += "}{c_1";

    if (c1Exp.level == 1) result += "^{1.05}";
    if (c1Exp.level == 2) result += "^{1.1}";
    if (c1Exp.level == 3) result += "^{1.15}";

    result += "}q^{1.5}\\quad \\dot{q}=\\frac{q_1"
    

    if (q1Exp.level == 1) result += "^{1.1}";
    if (q1Exp.level == 2) result += "^{1.2}";
    if (q1Exp.level == 3) result += "^{1.3}";

    result += "q_2"

    if (q2Exp.level == 1) result += "^{1.1}";
    if (q2Exp.level == 2) result += "^{1.2}";
    if (q2Exp.level == 3) result += "^{1.3}";

    result += "}{2}"

    result += "\\quad \\beta = \\frac{c_1";

    if (c1Exp.level == 1) result += "^{1.05}";
    if (c1Exp.level == 2) result += "^{1.1}";
    if (c1Exp.level == 3) result += "^{1.15}";

    result += "}{q_2";

    if (q2Exp.level == 1) result += "^{1.1}";
    if (q2Exp.level == 2) result += "^{1.2}";
    if (q2Exp.level == 3) result += "^{1.3}";

    result += "}"
    }
    else if (page.level == 1) {
    result += "\\dot{\\rho_2}=\\sum_{a=1}^{n} (\\frac{2c_1\\frac{c_2}{2}}{100})^{1+\\frac{c_3}{100}}"
    }

    if (page.level == 0) theory.primaryEquationScale = 0.9;
    if (page.level == 1) theory.primaryEquationScale = 1.2;
    theory.primaryEquationHeight = 100;
    
    return result;
}

var getSecondaryEquation = () => theory.latexSymbol + "=\\max\\rho_1";

var getTertiaryEquation = () => {
    let result = "";

    if (page.level == 0) {
    result = "q = ";

    result += q.toString(3);

    result += "\\quad ";

    result += "\\frac{c_1}{c_2} = ";

    result += (getC1(c1.level).pow(getC1Exponent(c1Exp.level).square()) / getC2(c2.level).pow(getC2Exponent(c2Exp.level))).toString(3);

    result += "\\quad";

    result += "\\beta = ";

    result += (getC1(c1.level).pow(getC1Exponent(c1Exp.level).square()) / getQ2(q2.level).pow(getQ2Exponent(q2Exp.level))).toString(3);
    }

    return result;
}
var getInternalState = () => `${q}`;
var setInternalState = (state) => {
    let values = state.split(" ");
    if (values.length > 0) q = parseBigNumber(values[0]);
}
var alwaysShowRefundButtons = () => true;
var getPublicationMultiplier = (tau) => BigNumber.ONE;
var getPublicationMultiplierFormula = (symbol) => "1";
var getTau = () => currency.value;
var get2DGraphValue = () => currency.value.sign * (BigNumber.ONE + currency.value.abs()).log10().toNumber();

var getC1 = (level) => Utils.getStepwisePowerSum(level, 2, 10, 0);
var getC2 = (level) => BigNumber.TWO.pow(level);
var getQ1 = (level) => Utils.getStepwisePowerSum(level+1, 2, 4, 0);
var getQ2 = (level) => BigNumber.TWO.pow(level);
var getPage = (level) => BigNumber.from(level+1);
var getC21 = (level) => Utils.getStepwisePowerSum(level, 2, 10, 0);
var getC22 = (level) => BigNumber.TWO.pow(level);
var getC23 = (level) => BigNumber.TWO * BigNumber.from(level);
var getN = (level) => BigNumber.from(level+1);
var getC1Exponent = (level) => BigNumber.from(1 + 0.05 * level);
var getC2Exponent = (level) => BigNumber.from(1 + 0.05 * level);
var getQ1Exponent = (level) => BigNumber.from(1 + 0.1 * level);
var getQ2Exponent = (level) => BigNumber.from(1 + 0.1 * level);

init();